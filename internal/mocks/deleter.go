// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "httpfs/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// Deleter is an autogenerated mock type for the Deleter type
type Deleter struct {
	mock.Mock
}

type Deleter_Expecter struct {
	mock *mock.Mock
}

func (_m *Deleter) EXPECT() *Deleter_Expecter {
	return &Deleter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Deleter) Delete(_a0 context.Context, _a1 entities.Hash) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Hash) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deleter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Deleter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.Hash
func (_e *Deleter_Expecter) Delete(_a0 interface{}, _a1 interface{}) *Deleter_Delete_Call {
	return &Deleter_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *Deleter_Delete_Call) Run(run func(_a0 context.Context, _a1 entities.Hash)) *Deleter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Hash))
	})
	return _c
}

func (_c *Deleter_Delete_Call) Return(_a0 error) *Deleter_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Deleter_Delete_Call) RunAndReturn(run func(context.Context, entities.Hash) error) *Deleter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeleter creates a new instance of Deleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Deleter {
	mock := &Deleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
