// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "httpfs/internal/entities"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// CallBack is an autogenerated mock type for the CallBack type
type CallBack struct {
	mock.Mock
}

type CallBack_Expecter struct {
	mock *mock.Mock
}

func (_m *CallBack) EXPECT() *CallBack_Expecter {
	return &CallBack_Expecter{mock: &_m.Mock}
}

// Post provides a mock function with given fields: _a0, _a1
func (_m *CallBack) Post(_a0 context.Context, _a1 entities.Hash) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Hash) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallBack_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type CallBack_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.Hash
func (_e *CallBack_Expecter) Post(_a0 interface{}, _a1 interface{}) *CallBack_Post_Call {
	return &CallBack_Post_Call{Call: _e.mock.On("Post", _a0, _a1)}
}

func (_c *CallBack_Post_Call) Run(run func(_a0 context.Context, _a1 entities.Hash)) *CallBack_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Hash))
	})
	return _c
}

func (_c *CallBack_Post_Call) Return(_a0 error) *CallBack_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CallBack_Post_Call) RunAndReturn(run func(context.Context, entities.Hash) error) *CallBack_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Pre provides a mock function with given fields: _a0, _a1
func (_m *CallBack) Pre(_a0 context.Context, _a1 io.Reader) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Pre")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallBack_Pre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pre'
type CallBack_Pre_Call struct {
	*mock.Call
}

// Pre is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 io.Reader
func (_e *CallBack_Expecter) Pre(_a0 interface{}, _a1 interface{}) *CallBack_Pre_Call {
	return &CallBack_Pre_Call{Call: _e.mock.On("Pre", _a0, _a1)}
}

func (_c *CallBack_Pre_Call) Run(run func(_a0 context.Context, _a1 io.Reader)) *CallBack_Pre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader))
	})
	return _c
}

func (_c *CallBack_Pre_Call) Return(_a0 error) *CallBack_Pre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CallBack_Pre_Call) RunAndReturn(run func(context.Context, io.Reader) error) *CallBack_Pre_Call {
	_c.Call.Return(run)
	return _c
}

// NewCallBack creates a new instance of CallBack. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCallBack(t interface {
	mock.TestingT
	Cleanup(func())
}) *CallBack {
	mock := &CallBack{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
